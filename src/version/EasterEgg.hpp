#pragma once
#include <array>
#include <random>
#include <string>

namespace EasterEgg {
static const std::array eggs{std::string{R"(
         .-.      _______                             .  '  *   .  . '
        {}``; |==|_______D                              .  * * -+-
        / ('        /|\                             .    * .    '  *
    (  /  |        / | \                                * .  ' .  .
  akg\(_)_]]      /  |  \                            *   *  .   .
                                                       '   *
asciiart.eu/
)"},
                             std::string{R"(
      ,-.
     / \  `.  __..-,O
    :   \ --''_..-'.'
    |    . .-' `. '.
    :     .     .`.'
     \     `.  /  ..
      \      `.   ' .
       `,       `.   \
      ,|,`.        `-.\
     '.||  ``-...__..-`
      |  |
      |__|
      /||\
     //||\\
    // || \\
 __//__||__\\__
'--------------' SSt
asciiart.eu/
)"},
                             std::string{R"(
Stargazer by Dokusan
             _
           /(_))
         _/   /
        //   /
       //   /
       /\__/
       \O_/=-.
   _  / || \  ^o
   \\/ ()_) \.
    ^^ <__> \()
      //||\\
     //_||_\\  ds
    // \||/ \\
   //   ||   \\
  \/    |/    \/
  /     |      \
 /      |       \
        |
asciiart.eu/
)"},
                             std::string{R"(
 .    '                   .  "   '
            .  .  .                 '      '
    "`       .   .
                                     '     '
  .    '      _______________
          ==c(___(o(______(_()
                  \=\
                   )=\
                  //|\\
                 //|| \\
                // ||  \\
               //  ||   \\
              //         \\
David Riley
asciiart.eu/
)"},
                             std::string{R"(
  *    .  *       .   ,          *
           .       . .        *
 *   .   .'    * ,      .       .  ,     *
   .     *     .'
   '     .     .  *        *  .'.
       .   ' '        .    .    '   .
.  *        ,   *               '      *
                             .
         *          .   *


                  .
                 ( \
                 \  .     `{{{{}}
                  \( \     ).  c
                   \  .     _  /
                    \( \ m/  _\\__
                     \  V/\`\ ++ /|
                      \( \ \ \__/ |
                     o/\_Z  \_____)
                     /=\.   .~~~~~|
                    // \\   |_____|
                   //   \\  | | | |
                  //     \\ | | | |
                 //      .\\( | ( |
                //         \\ | | |
               //          .\\| | |
              //           _|\\_| |
             //           (___\\__)
           .//Pru              \\
asciiart.eu/
)"},
                             std::string{R"(
                                       _..-,--.._
                                 ,`. ,',','      `.
                                 `. `,/`/          \
                                   :'.`:            :
        ____ _          _ __       | |`|            |
      _(    `.)        ( (  )`.    : `-'            ;     _
     ( (    ) ))      ( (    ))    ,\_            _/.  (`','
    ( (   )  _)        `-(__.'    '.  ```------'''  .`
     '.__)--'       .-..           |``-...____...-''|
                   (_)_))          |                |
              ,'`.        ___...---|                |--..._
  ,'`. ,'`. ,'   _`.---'''         |                | "
-'..._`.   `.   /`-._  "      "    |    _           |
       ```-..`./:::::)             `-...||______...-'    "
              /:::_.'     "        "                "
           _.:.'''   "                       "          SSt
asciiart.eu/
)"},
                             std::string{R"(
             ______
          ,'"       "-._
        ,'              "-._ _._
        ;              __,-'/   |
       ;|           ,-' _,'"'._,.
       |:            _,'      |\ `.
       : \       _,-'         | \  `.
        \ \   ,-'             |  \   \
         \ '.         .-.     |       \
          \  \         "      |        :
           `. `.              |        |
             `. "-._          |        ;
             / |`._ `-._      L       /
            /  | \ `._   "-.___    _,'
           /   |  \_.-"-.___   """"
           \   :            /"""
            `._\_       __.'_
       __,--''_ ' "--'''' \_  `-._
 __,--'     .' /_  |   __. `-._   `-._
<            `.  `-.-''  __,-'     _,-'
 `.            `.   _,-'"      _,-'
   `.            ''"lka    _,-'
     `.                _,-'
       `.          _,-'
         `.   __,'"
           `'"
asciiart.eu/
)"},
                             std::string{R"(
         _nnnn_
        dGGGGMMb
       @p~qp~~qMb
       M|@||@) M|
       @,----.JM|
      JS^\__/  qKL
     dZP        qKRb
    dZP          qKKb
   fZP            SMMb
   HZM            MMMM
   FqM            MMMM
 __| ".        |\dS"qML
 |    `.       | `' \Zq
_)      \.___.,|     .'
\____   )MMMMMP|   .'
     `-'       `--' hjm
asciiart.eu/
)"},
                             std::string{R"(
                  .----.
      .---------. | == |
      |.-"""""-.| |----|
      ||       || | == |
      ||       || |----|
      |'-.....-'| |::::|
      `"")---(""` |___.|
     /:::::::::::\" _  "
    /:::=======:::\`\`\
jgs `"""""""""""""`  '-'
asciiart.eu/
)"},
                             std::string{R"(
              
                        
              
                            
                     
)"},
                             std::string{R"(
                                _ 
  __ _ _ __ ___  _ __  ___  ___(_)
 / _` | '_ ` _ \| '_ \/ __|/ __| |
| (_| | | | | | | |_) \__ \ (__| |
 \__,_|_| |_| |_| .__/|___/\___|_|
                |_|              
)"},
                             std::string{R"(
 ________
< ampsci >
 --------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||            
)"}};

inline std::string get_egg() {
  std::random_device rd;
  return eggs.at(rd() % eggs.size());
}

} // namespace EasterEgg